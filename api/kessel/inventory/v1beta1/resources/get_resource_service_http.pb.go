// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: kessel/inventory/v1beta1/resources/get_resource_service.proto

package resources

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceQueryServiceGetResourceByResourceId = "/kessel.inventory.v1beta1.resources.ResourceQueryService/GetResourceByResourceId"

type ResourceQueryServiceHTTPServer interface {
	GetResourceByResourceId(context.Context, *GetResourceByResourceIdRequest) (*GetResourceByResourceIdResponse, error)
}

func RegisterResourceQueryServiceHTTPServer(s *http.Server, srv ResourceQueryServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/inventory/v1beta1/resources/{resource_id}", _ResourceQueryService_GetResourceByResourceId0_HTTP_Handler(srv))
}

func _ResourceQueryService_GetResourceByResourceId0_HTTP_Handler(srv ResourceQueryServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceByResourceIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQueryServiceGetResourceByResourceId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResourceByResourceId(ctx, req.(*GetResourceByResourceIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceByResourceIdResponse)
		return ctx.Result(200, reply)
	}
}

type ResourceQueryServiceHTTPClient interface {
	GetResourceByResourceId(ctx context.Context, req *GetResourceByResourceIdRequest, opts ...http.CallOption) (rsp *GetResourceByResourceIdResponse, err error)
}

type ResourceQueryServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceQueryServiceHTTPClient(client *http.Client) ResourceQueryServiceHTTPClient {
	return &ResourceQueryServiceHTTPClientImpl{client}
}

func (c *ResourceQueryServiceHTTPClientImpl) GetResourceByResourceId(ctx context.Context, in *GetResourceByResourceIdRequest, opts ...http.CallOption) (*GetResourceByResourceIdResponse, error) {
	var out GetResourceByResourceIdResponse
	pattern := "/api/inventory/v1beta1/resources/{resource_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceQueryServiceGetResourceByResourceId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
